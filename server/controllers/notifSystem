const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');

const app = express();
app.use(cors());
app.use(express.json());

mongoose.connect('mongodb://localhost/notification-app', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useCreateIndex: true,
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
  console.log('MongoDB connected!');
});

// Define notification schema
const notificationSchema = new mongoose.Schema({
  message: String,
  date: { type: Date, default: Date.now },
});

// Define notification model
const Notification = mongoose.model('Notification', notificationSchema);

// Implement API endpoints for notifications
app.post('/notifications', async (req, res) => {
  try {
    const notification = new Notification(req.body);
    await notification.save();
    res.json(notification);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while creating the notification' });
  }
});

app.get('/notifications', async (req, res) => {
  try {
    const notifications = await Notification.find().sort('-date').exec();
    res.json(notifications);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while retrieving the notifications' });
  }
});

app.delete('/notifications/:id', async (req, res) => {
  try {
    const notification = await Notification.findByIdAndDelete(req.params.id).exec();
    if (!notification) {
      res.status(404).json({ error: 'Notification not found' });
    } else {
      res.json(notification);
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while deleting the notification' });
  }
});

app.listen(3001, () => {
  console.log('Server listening on port 3001');
});
